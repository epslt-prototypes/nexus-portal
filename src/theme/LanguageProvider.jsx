import { createContext, useContext, useEffect, useMemo, useState } from 'react'

const DEFAULT_LANG = 'lt'
const STORAGE_KEY = 'nexus_lang'

const dictionaries = {
  lt: {
    settings: 'Nustatymai',
    changePassword: 'Keisti slaptažodį',
    passwordExpires: 'Slaptažodis galioja iki',
    oldPassword: 'Senas slaptažodis',
    newPassword: 'Naujas slaptažodis',
    repeatNewPassword: 'Pakartokite naują slaptažodį',
    cancel: 'Atšaukti',
    submitChangePassword: 'Pakeisti slaptažodį',
    notifications: 'Pranešimai',
    logout: 'Baigti darbą',
    language: 'Kalba',
    english: 'Anglų',
    lithuanian: 'Lietuvių',
    navigationExpand: 'Išskleisti navigaciją',
    navigationCollapse: 'Sutraukti navigaciją',
    services: 'Paslaugos',
    servicesNew: 'Įvesti naują',
    servicesCatalog: 'Katalogas',
    servicesStatus: 'Būsena',
    servicesReceipts: 'Kvitai',
    acts: 'Aktai',
    actsPayments: 'Apmokėjimo aktai',
    // Services Entry page
    insuredService: 'Prisijungti prie kliento kortelės',
    cardNumber: 'Kortelės numeris',
    personalCodeLast4: 'Kliento asmens kodo paskutiniai 4 skaitmenys',
    enter4digits: 'Įveskite 4 skaitmenis',
    authorize: 'Prisijungti',
    insurancePeriod: 'Draudimo laikotarpis',
    insured: 'Draudžiamasis',
    personalCode: 'Asmens kodas',
    logoutCard: 'Atsijungti nuo kortelės',
    insuranceBalances: 'Draudimo sumų likučiai',
    approved: 'Patvirtinta',
    pendingApproval: 'Laukia patvirtinimo',
    insurerNotCompensated: 'Draudikas nekompensuoja',
    totalPrice: 'Visa kaina (EUR)',
    tlkPart: 'TLK dalis (EUR)',
    discount: 'Nuolaida (EUR)',
    insurerPays: 'Draudiko mokama dalis',
    clientPays: 'Kliento mokama dalis',
    vatRate: 'PVM tarifas (proc.)',
    amountWithoutVat: 'Suma be PVM (EUR)',
    diseaseCode: 'Ligos kodas',
    code: 'Kodas',
    newService: 'Nauja paslauga',
    totalToPay: 'Iš viso mokėti (EUR)',
    totalCompensated: 'Iš viso kompensuota (EUR)',
    totalDiscount: 'Suteikta nuolaida (EUR)',
    viewReceipt: 'Peržiūrėti kvitą',
    confirmProvision: 'Patvirtinti suteikimą',
    editService: 'Redaguoti paslaugą',
    serviceCodeOrName: 'Paslaugos kodas arba pavadinimas',
    nothingFound: 'Nieko nerasta',
    quantity: 'Kiekis',
    discountPct: 'Nuolaida (%)',
    unitPriceEur: 'Vnt. kaina (EUR)',
    discountValueEur: 'Nuolaidos vertė (EUR)',
    applyTlkComp: 'Taikyti TLK kompensaciją',
    tlkCompEur: 'TLK kompensacija (EUR)',
    priceEur: 'Kaina (EUR)',
    remove: 'Pašalinti',
    save: 'Išsaugoti',
    add: 'Įtraukti',
    close: 'Uždaryti',
    rejected: 'Atmesta',
    // Services List page
    servicesCatalogTitle: 'Paslaugų katalogas',
    searchPlaceholderServices: 'Ieškoti pagal paslaugos kodą arba pavadinimą...',
    filterAll: 'Viskas',
    filterApproved: 'Draudiko patvirtintos',
    filterNotApproved: 'Draudiko nepatvirtintos',
    legendApproved: 'Draudiko patvirtintos',
    legendNotApproved: 'Draudiko nepatvirtintos',
    thCode: 'Kodas',
    thName: 'Pavadinimas',
    thTotalPriceEur: 'Visa kaina (EUR)',
    thVatRatePct: 'PVM tarifas (%)',
    thTlkCompEur: 'TLK komp. (EUR)',
    thValidFrom: 'Galioja nuo',
    thValidTo: 'Galioja iki',
    thStatus: 'Būsena',
    emptyFiltered: 'Pagal paieškos kriterijus paslaugų nerasta',
    emptyNoServices: 'Paslaugų nėra',
    showing: 'Rodyti',
    of: 'iš',
    servicesWord: 'paslaugų',
    import: 'Importuoti',
    // Status page
    servicesStatusTitle: 'Paslaugų būsena',
    status: 'Būsena',
    user: 'Vartotojas',
    dateFrom: 'Data nuo',
    dateTo: 'Data iki',
    all: 'Visos',
    approvedLegend: 'Patvirtinta',
    pendingLegend: 'Laukia patvirtinimo',
    notCompensatedLegend: 'Draudikas nekompensuoja',
    needsClarificationLegend: 'Būtina patikslinti',
    detailsTitle: 'Paslaugos detalės',
    name: 'Pavadinimas',
    statusLabel: 'Būsena',
    serviceCode: 'Paslaugos kodas',
    discountLabel: 'Nuolaida',
    tlkCompensationLabel: 'TLK kompensacija (EUR)',
    enteredBy: 'Įvedė',
    authNumber: 'Autorizacijos Nr.',
    insuredPerson: 'Apdraustasis',
    date: 'Data',
    closeAction: 'Uždaryti',
    partnerComment: 'Partnerio komentaras',
    insurerComment: 'Draudiko komentaras',
    // Receipts page
    receiptsTitle: 'Kvitai',
    receiptNumber: 'Kvito numeris',
    enterNumber: 'Įveskite numerį',
    receiptCreatedAt: 'Kvito formavimo data',
    insuredDue: 'Apdraustojo mokėtina suma (EUR)',
    printReceipt: 'Spausdinti čekį',
    noRecords: 'Įrašų nerasta pagal pasirinktus filtrus',
    exportReceipt: 'Eksportuoti kvitą',
    cancelAction: 'Atšaukti',
    receiptLabel: 'Kvitas',
    totalPriceShort: 'Visa kaina',
    chooseExportFormat: 'Pasirinkite eksporto formatą',
    word: 'Word',
    pdf: 'PDF',
    excel: 'Excel',
    fileWillDownload: 'Failas bus atsisiųstas į jūsų įrenginį.',
    // Acts page
    actsTitle: 'Apmokėjimo aktai',
    search: 'Ieškoti',
    searchPlaceholderActs: 'Ieškoti pagal bet kurį lauką...',
    claimActNumber: 'Reikalavimo akto Nr.',
    paymentStatus: 'Apmokėjimo būklė',
    sumEur: 'Suma (EUR)',
    sumNoVatEur: 'Suma be PVM (EUR)',
    createdAtShort: 'Sudarymo data',
    invoiceReceivedAt: 'SF gavimo data',
    enteredByLabel: 'Įvedė',
    noRecordsActs: 'Įrašų nerasta pagal pasirinktus filtrus',
    formedDate: 'Suformavimo data',
    actLabel: 'Aktas',
    vatAmount: 'PVM (EUR)',
    totalShort: 'Viso (EUR)',
  },
  en: {
    settings: 'Settings',
    changePassword: 'Change password',
    passwordExpires: 'Password valid until',
    oldPassword: 'Old password',
    newPassword: 'New password',
    repeatNewPassword: 'Repeat new password',
    cancel: 'Cancel',
    submitChangePassword: 'Update password',
    notifications: 'Notifications',
    logout: 'Sign out',
    language: 'Language',
    english: 'English',
    lithuanian: 'Lithuanian',
    navigationExpand: 'Expand navigation',
    navigationCollapse: 'Collapse navigation',
    services: 'Services',
    servicesNew: 'Add services',
    servicesCatalog: 'Catalog',
    servicesStatus: 'Status',
    servicesReceipts: 'Receipts',
    acts: 'Acts',
    actsPayments: 'Payment acts',
    // Services Entry page
    insuredService: 'Customer card login',
    cardNumber: 'Card number',
    personalCodeLast4: 'Last 4 digits of personal code',
    enter4digits: 'Enter 4 digits',
    authorize: 'Login',
    insurancePeriod: 'Insurance period',
    insured: 'Insured person',
    personalCode: 'Personal code',
    logoutCard: 'Disconnect card',
    insuranceBalances: 'Insurance balance',
    approved: 'Approved',
    pendingApproval: 'Pending approval',
    insurerNotCompensated: 'Not compensated by insurer',
    totalPrice: 'Total price (EUR)',
    tlkPart: 'TLK part (EUR)',
    discount: 'Discount (EUR)',
    insurerPays: 'Insurer pays',
    clientPays: 'Client pays',
    vatRate: 'VAT rate (%)',
    amountWithoutVat: 'Amount without VAT (EUR)',
    diseaseCode: 'Disease code',
    code: 'Code',
    newService: 'New service',
    totalToPay: 'Total to pay (EUR)',
    totalCompensated: 'Total compensated (EUR)',
    totalDiscount: 'Total discount (EUR)',
    viewReceipt: 'View receipt',
    confirmProvision: 'Confirm provision',
    editService: 'Edit service',
    serviceCodeOrName: 'Service code or name',
    nothingFound: 'Nothing found',
    quantity: 'Quantity',
    discountPct: 'Discount (%)',
    unitPriceEur: 'Unit price (EUR)',
    discountValueEur: 'Discount value (EUR)',
    applyTlkComp: 'Apply TLK compensation',
    tlkCompEur: 'TLK compensation (EUR)',
    priceEur: 'Price (EUR)',
    remove: 'Remove',
    save: 'Save',
    add: 'Add',
    close: 'Close',
    rejected: 'Rejected',
    // Services List page
    servicesCatalogTitle: 'Services catalog',
    searchPlaceholderServices: 'Search by service code or name...',
    filterAll: 'All',
    filterApproved: 'Insurer approved',
    filterNotApproved: 'Insurer not approved',
    legendApproved: 'Insurer approved',
    legendNotApproved: 'Insurer not approved',
    thCode: 'Code',
    thName: 'Name',
    thTotalPriceEur: 'Total price (EUR)',
    thVatRatePct: 'VAT rate (%)',
    thTlkCompEur: 'TLK comp. (EUR)',
    thValidFrom: 'Valid from',
    thValidTo: 'Valid to',
    thStatus: 'Status',
    emptyFiltered: 'No services match your filters',
    emptyNoServices: 'No services',
    showing: 'Showing',
    of: 'of',
    servicesWord: 'services',
    import: 'Import',
    // Status page
    servicesStatusTitle: 'Services status',
    status: 'Status',
    user: 'User',
    dateFrom: 'Date from',
    dateTo: 'Date to',
    all: 'All',
    approvedLegend: 'Approved',
    pendingLegend: 'Pending approval',
    notCompensatedLegend: 'Not compensated by insurer',
    needsClarificationLegend: 'Needs clarification',
    detailsTitle: 'Service details',
    name: 'Name',
    statusLabel: 'Status',
    serviceCode: 'Service code',
    discountLabel: 'Discount',
    tlkCompensationLabel: 'TLK compensation (EUR)',
    enteredBy: 'Entered by',
    authNumber: 'Authorization No.',
    insuredPerson: 'Insured person',
    date: 'Date',
    closeAction: 'Close',
    partnerComment: 'Partner comment',
    insurerComment: 'Insurer comment',
    // Receipts page
    receiptsTitle: 'Receipts',
    receiptNumber: 'Receipt number',
    enterNumber: 'Enter number',
    receiptCreatedAt: 'Receipt created at',
    insuredDue: 'Insurer due (EUR)',
    printReceipt: 'Print receipt',
    noRecords: 'No records match the selected filters',
    exportReceipt: 'Export receipt',
    cancelAction: 'Cancel',
    receiptLabel: 'Receipt',
    totalPriceShort: 'Total price',
    chooseExportFormat: 'Choose export format',
    word: 'Word',
    pdf: 'PDF',
    excel: 'Excel',
    fileWillDownload: 'The file will be downloaded to your device.',
    // Acts page
    actsTitle: 'Payment acts',
    search: 'Search',
    searchPlaceholderActs: 'Search across any field...',
    claimActNumber: 'Claim act No.',
    paymentStatus: 'Payment status',
    sumEur: 'Amount (EUR)',
    sumNoVatEur: 'Amount excluding VAT (EUR)',
    createdAtShort: 'Created at',
    invoiceReceivedAt: 'Invoice received at',
    enteredByLabel: 'Entered by',
    noRecordsActs: 'No records match the selected filters',
    formedDate: 'Formation date',
    actLabel: 'Act',
    vatAmount: 'VAT (EUR)',
    totalShort: 'Total (EUR)',
  }
}

export const LanguageContext = createContext({
  lang: DEFAULT_LANG,
  setLang: () => {},
  t: (key) => key,
})

export default function LanguageProvider({ children }) {
  const [lang, setLangState] = useState(() => {
    try {
      return localStorage.getItem(STORAGE_KEY) || DEFAULT_LANG
    } catch {
      return DEFAULT_LANG
    }
  })

  useEffect(() => {
    try {
      localStorage.setItem(STORAGE_KEY, lang)
    } catch {}
  }, [lang])

  const setLang = (next) => {
    setLangState(next)
  }

  const t = useMemo(() => {
    const dict = dictionaries[lang] || dictionaries[DEFAULT_LANG]
    return (key) => dict[key] ?? key
  }, [lang])

  const value = useMemo(() => ({ lang, setLang, t }), [lang, setLang, t])

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  )
}

export function useI18n() {
  return useContext(LanguageContext)
}


